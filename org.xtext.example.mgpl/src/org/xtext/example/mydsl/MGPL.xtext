grammar org.xtext.example.mydsl.MGPL with org.eclipse.xtext.common.Terminals

generate mGPL "http://www.xtext.org/example/mydsl/MGPL"

Prog :
	 'game' name=ID '(' attrAssList=AttrAssList?  ')' decls+=Decl* stmtBlock=StmtBlock blocks+=Block*;
	 
Decl :
	VarDecl ';'  | ObjDecl ';';
	
VarDecl :
	'int' name=ID init=Init? | 'int' name=ID '[' value=INT ']';
	
Init :
	'=' Expr;
	
ObjDecl :
	ObjType name=ID '(' attrAssList=AttrAssList? ')' | ObjType name=ID '[' value=INT ']';
	
ObjType :
	'rectangle' | 'triangle' | 'circle';
	
AttrAssList : 
	test=AttrAss (',' attrAssList += AttrAssList)?
;

AttrAss :
	name=ID '=' expr=Expr;
	
Block :
	AnimBlock | EventBlock;
	
AnimBlock :
	'animation' name=ID '(' ObjType objName=ID ')' stmtBlock=StmtBlock;

EventBlock :
	'on' keyStroke=KEYSTROKE stmtBlock=StmtBlock;
	
terminal KEYSTROKE :
	'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow';
	
StmtBlock :
	{StmtBlock} '{' stmts+=Stmt* '}';
	
Stmt :
	IfStmt | ForStmt | AssStmt ';'
;
	
IfStmt :
	'if' '(' Expr ')' ifStmtBlock=StmtBlock ('else' elseStmtBlock=StmtBlock)?;
	
ForStmt :
	'for' '(' initAssStmt=AssStmt ';' expr=Expr ';' afterthoughAssStmt=AssStmt ')' stmtBlock=StmtBlock;
	
AssStmt :
	var=Var '=' expr=Expr;

OrigVar :
	name=ID | name=ID '[' expr=Expr ']' | objName=ID '.' objProp=ID | objArray=ID '[' expr=Expr ']' '.' objProp=ID;

Var :
	name=ID todo=Var2?;

Var2:
	'.' objProp=ID | '[' expr=Expr ']' todo=Var3?
;

Var3:
	'.' objProp=ID	
;

Expr :
	OrExpr ;

OrExpr :
	conjs += AndExpr ('||' conjs +=AndExpr)* 
;

AndExpr :
	rels += RelExpr ('&&' rels += RelExpr)*
;

RelExpr :
	adds += AddExpr (RELS adds+= AddExpr)*
;

AddExpr :
	muls += MulExpr ((ADD | '-') muls+= MulExpr)*
;

MulExpr :
	uns += UnExpr ((MUL | DIV) uns+= UnExpr)*
;

UnExpr :
	(UN | '-')? atom = AtomExpr
;

AtomExpr:
	var=Var ('touches' var2=Var)? | value=INT | '(' Expr ')'
;


terminal RELS: 
	'==' | '<' | '<='
;

terminal ADD: 
	'+' 
;

terminal MUL: 
	'*' 
;

terminal DIV: 
	'/' 
;


terminal UN:
	'!';
	
	