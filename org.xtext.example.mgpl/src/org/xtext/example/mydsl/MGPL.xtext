grammar org.xtext.example.mydsl.MGPL with org.eclipse.xtext.common.Terminals

generate mGPL "http://www.xtext.org/example/mydsl/MGPL"


Prog :
	 'game' name=ID '(' attrAssList=AttrAssList?  ')' decls+=Decl* stmtBlock=StmtBlock blocks+=Block*;
	 
Decl :
	varDecl=VarDecl ';'  | ObjDecl ';';
	
VarDecl :
	type='int' name=ID initVal=Init? | type='int' name=ID '[' value=INT ']';
	
Init :
	'=' expr=Expr;
	
ObjDecl :
	type=ObjType name=ID '(' attrAssList=AttrAssList? ')' | type=ObjType name=ID '[' arrSize=INT ']';
	
ObjType :
	'rectangle' | 'triangle' | 'circle';
	
AttrAssList : 
	attrAss=AttrAss (',' attrAssList += AttrAssList)?
;

AttrAss :
	name=ID '=' expr=Expr;
	
Block :
	animBlock=AnimBlock | eventBlock=EventBlock;
	
AnimBlock :
	'animation' name=ID '(' objType=ObjType objName=ID ')' stmtBlock=StmtBlock;

EventBlock :
	'on' keyEvent=KEYSTROKE stmtBlock=StmtBlock;
	
terminal KEYSTROKE :
	'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow';
	
StmtBlock :
	{StmtBlock} '{' stmts+=Stmt* '}';
	
Stmt :
	ifStmt=IfStmt | forStmt=ForStmt | assStmt=AssStmt ';'
;
	
IfStmt :
	'if' '(' cond=Expr ')' trueStmtBlock=StmtBlock ('else' falseStmtBlock=StmtBlock)?;
	
ForStmt :
	'for' '(' initAssStmt=AssStmt ';' cond=Expr ';' afterthoughAssStmt=AssStmt ')' stmtBlock=StmtBlock;
	
AssStmt :
	var=Var '=' expr=Expr;

Var :
	name=ID (varProp=VarProp | varArray=VarArray)?;

VarProp:
	'.' objProp=ID 
;

VarArray:
	'[' indexExpr=Expr ']' varProp=VarProp?
;


Expr :
	AndExpr ({Operation.left=current} op=OR right += AndExpr)* 
;

AndExpr returns Expr:
	RelExpr ({Operation.left=current} op=AND right += RelExpr)*
;

RelExpr returns Expr:
	AddExpr ({Operation.left=current} op=RELS right += AddExpr)*
;

AddExpr returns Expr:
	MulExpr ({Operation.left=current} op=(ADD | Minus) right += MulExpr)*
;

MulExpr returns Expr:
	UnExpr ({Operation.left=current}  op=(MUL | DIV) right += UnExpr)*
;

UnExpr returns Expr: 
  {Expr} ({Operation.left=current} op=(NOT | Minus))? atom = AtomExpr 
 ;

AtomExpr returns Expr:
	rhsVar=Var ('touches' lhsVar=Var)? | value=INT | '(' expr=Expr ')'
;


// No terminal, context is needed to differ unary operations from add operations
Minus:
	'-'
;

terminal AND: 
	'&&' 
;

terminal OR: 
	'||'
;

terminal LT: 
	'<' 
;

terminal LE: 
	'<='
;

terminal RELS:
	AND | LT | LE	
;

terminal EQ: 
	'=='
;

terminal ADD: 
	'+' 
;

terminal MUL: 
	'*' 
;

terminal DIV: 
	'/' 
;

terminal NOT:
	'!';
	
	