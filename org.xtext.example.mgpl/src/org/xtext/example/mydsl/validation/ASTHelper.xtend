/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.validation

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.xtext.example.mydsl.mGPL.AnimBlock
import org.xtext.example.mydsl.mGPL.Prog
import org.xtext.example.mydsl.mGPL.Var
import org.xtext.example.mydsl.mGPL.AttrAss
import org.xtext.example.mydsl.mGPL.ObjDecl

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ASTHelper extends AbstractMGPLValidator {
	
	public static def isProg(Var v) {
		val prog = v.eResource.allContents.head as Prog
		if (prog.name.equals(v.name)) {
			return true
		}
	}
	
	public static def isAnimBlockProperty(AttrAss a) {
		return a.name == "animation_block";
	}

	public static def findVarDecl(Var v) {
		val prog = v.eResource.allContents.head as Prog
		return prog.decls.findFirst [
			name.equals(v.name)
		]
	}

	public static def isParameter(Var v) {
		val container = v.eContainer
		return isParameterRecursively(v, container)
	}
	
	public static def ObjDecl findParentObjectDeclarationRecursively(AttrAss a, EObject container) {
		if (container === null) {
			return null;
		}
		if (container instanceof ObjDecl) {
			return container;
		}
		return findParentObjectDeclarationRecursively(a, container.eContainer)
	}
	
	public static def boolean isParameterRecursively(Var v, EObject container) {
		if (container === null) {
			return false;
		}
		if (container instanceof AnimBlock) {
			return container.objName.equals(v.name)
		}
		return isParameterRecursively(v, container.eContainer)
	}
	
	public static def String findParameterTypeRecursively(Var v, EObject container) {
		if (container === null) {
			return "";
		}
		if (container instanceof AnimBlock) {
			if(container.objName.equals(v.name)) {
				return container.objType;
			}
			return "";
		}
		return findParameterTypeRecursively(v, container.eContainer)
	}

	public static def isAnimation(Var v) {
		val prog = v.eResource.allContents.head as Prog
		return prog.functions.filter [
			it instanceof AnimBlock
		].map [
			it as AnimBlock
		].exists [
			name.equals(v.name)
		]
	}
	
	public static def findAnimations(EObject o, Function1<AnimBlock, Boolean> f) {
		val prog = o.eResource.allContents.head as Prog
		return prog.functions.filter [
			it instanceof AnimBlock
		].map [
			it as AnimBlock
		].filter(f)
	}
	
}
